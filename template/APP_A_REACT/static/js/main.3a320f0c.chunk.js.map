{"version":3,"sources":["Counter.js","MapFilterReduceArray.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","state","counter","onIncrement","bind","onDecrement","this","setState","Row","Col","Button","variant","onClick","React","Component","MapFilterReduceArray","result","reduce","sum","number","Table","striped","bordered","hover","id","name","isDeveloper","filter","user","map","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kUA4CeA,E,YApCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAAS,GAEZ,EAAKC,YAAa,EAAKA,YAAYC,KAAjB,gBAClB,EAAKC,YAAa,EAAKA,YAAYD,KAAjB,gBANJ,E,2EAUfE,KAAKC,UACD,SAAAN,GAAK,MAAG,CACJC,QAASD,EAAMC,QAAU,Q,oCAKjCI,KAAKC,UACD,SAAAN,GAAK,MAAG,CACJC,QAASD,EAAMC,QAAU,Q,+BAKjC,OACQ,6BACI,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,4BAAKH,KAAKL,MAAMC,UACrB,kBAACO,EAAA,EAAD,KAAK,kBAACC,EAAA,EAAD,CAASC,QAAQ,kBAAkBC,QAASN,KAAKH,aAAjD,MACL,kBAACM,EAAA,EAAD,KAAK,kBAACC,EAAA,EAAD,CAASC,QAAQ,kBAAkBC,QAASN,KAAKD,aAAjD,Y,GA9BPQ,IAAMC,W,QC0CbC,E,iLA3CP,IAOQC,EADU,CAAC,GAAG,GAAG,GAAG,IACHC,QAAO,SAACC,EAAIC,GACjC,OAAOD,EAAMC,IACb,GACJ,OACI,6BACI,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACI,4BACI,iCACA,oCACA,+BAjBR,CACR,CAACC,GAAG,EAAEC,KAAM,OAAQC,aAAY,GAChC,CAACF,GAAG,EAAEC,KAAM,OAAQC,aAAY,GAChC,CAACF,GAAG,EAAEC,KAAM,OAAQC,aAAY,IAkBnBC,QAAO,SAAAC,GAAI,OAAIA,EAAKF,eACpBG,KAAI,SAAAD,GAAI,OACG,wBAAIE,IAAKF,EAAKJ,IACV,4BAAKI,EAAKJ,IACV,4BAAKI,EAAKH,MACV,4BAAI,kBAAC,EAAD,WAGxB,4BACI,6BACA,6BACA,4BAAKT,U,GAnCMH,IAAMC,WCoC1BiB,E,iLA/BX,OACE,yBAAKC,UAAU,OACb,gCACE,6BACE,kBAAC,EAAD,a,GAPMnB,IAAMC,WCOJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a320f0c.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nclass Counter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            counter: 0\r\n         }\r\n         this.onIncrement =this.onIncrement.bind(this);\r\n         this.onDecrement =this.onDecrement.bind(this);\r\n    }\r\n\r\n    onIncrement(){\r\n        this.setState(\r\n            state=>({\r\n                counter: state.counter + 1\r\n            })\r\n        );\r\n    }\r\n    onDecrement(){\r\n        this.setState(\r\n            state=>({\r\n                counter: state.counter - 1\r\n            })\r\n        );\r\n    }\r\n    render() { \r\n        return ( \r\n                <div>\r\n                    <Row>\r\n                        <Col><h1>{this.state.counter}</h1></Col>\r\n                        <Col><Button  variant=\"outline-primary\" onClick={this.onIncrement}>+</Button ></Col>\r\n                        <Col><Button  variant=\"outline-primary\" onClick={this.onDecrement}>-</Button ></Col>\r\n                    </Row>\r\n                </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Counter;","import React from 'react';\r\nimport Counter from './Counter';\r\nimport Table from 'react-bootstrap/Table'\r\nclass MapFilterReduceArray extends React.Component {\r\n    \r\n    render() { \r\n        let users = [\r\n            {id:1,name: \"Mr 1\", isDeveloper:true},\r\n            {id:2,name: \"Mr 2\", isDeveloper:true},\r\n            {id:3,name: \"Mr 3\", isDeveloper:false}\r\n          ];\r\n\r\n          const numbers = [10,20,30,40];\r\n          const result = numbers.reduce((sum,number)=>{\r\n            return sum + number;\r\n          },0);\r\n        return ( \r\n            <div>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Name</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    {users\r\n                        .filter(user => user.isDeveloper)\r\n                        .map(user => \r\n                                    <tr key={user.id}>\r\n                                        <td>{user.id}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td><Counter /></td>\r\n                                    </tr>\r\n                    )}\r\n                    <tr>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td>{result}</td>\r\n                    </tr>\r\n                </Table>\r\n                    \r\n                \r\n                \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default MapFilterReduceArray;","import React from 'react';\nimport './App.css';\n//import Sidenav from './Sidenav';\n//import AxiosJsonData from './AxiosJsonData';\nimport MapFilterReduceArray from './MapFilterReduceArray';\nclass App extends React.Component {\n\n  render() { \n    return ( \n      <div className=\"App\">\n        <header >\n          <div>\n            <MapFilterReduceArray />\n          </div>\n        </header>\n      </div>\n     );\n  }\n}\n \n/*\nclass App extends React.Component{\ngetGreeting(){\n  return 'Welcome to React';\n}\ngetGreeting2(){\n  return 'We will learn React js';\n}\n  render(){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>{this.getGreeting()}</h1>\n            <h2>{this.getGreeting2()}</h2>  \n          </header>\n        </div>\n      );\n  }\n}*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}